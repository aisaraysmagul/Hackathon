import pyowm as pyowm
import telebot
import constants
import urllib.request, json
import requests, bs4
from telebot import types
bot = telebot.TeleBot(constants.token)

s=""
food=""
curr =""
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row("üçΩ –ì–¥–µ –ø–æ–µ—Å—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
    user_markup.row("üèî –ì–¥–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
    user_markup.row("üõè –ì–¥–µ –ø–µ—Ä–µ–Ω–æ—á–µ–≤–∞—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
    user_markup.row("üìù–ü–ª–∞–Ω–Ω–µ—Ä")
    user_markup.row("‚õÖ –ü–æ–≥–æ–¥–∞")
    user_markup.row("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=user_markup)


@bot.message_handler(commands=['help'])
def handle_text(message):
    bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    global s
    global food
    global curr
    if message.text == "üçΩ –ì–¥–µ –ø–æ–µ—Å—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        near = telebot.types.KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–∏–µ")
        spisok = telebot.types.KeyboardButton(text="–í –≥–æ—Ä–æ–¥–µ")
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        keyboard.add(near, spisok, back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=keyboard)
        s="food"
    elif message.text=="–ë–ª–∏–∂–∞–π—à–∏–µ":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        asian = telebot.types.KeyboardButton(text="–ê–∑–∏–∞—Ç—Å–∫–∞—è")
        national = telebot.types.KeyboardButton(text="–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è")
        europian = telebot.types.KeyboardButton(text="–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è")
        turkish = telebot.types.KeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∞—è")
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        keyboard.add(national, asian, europian, turkish, back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é", reply_markup=keyboard)
        s="nearbyfood"
    elif message.text=="–ê–∑–∏–∞—Ç—Å–∫–∞—è":
        k = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        mesto = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        k.add(mesto, back)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=k)
        food="asian+food"
    elif message.text == "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è":
        k = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        mesto = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        k.add(mesto, back)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=k)
        food="national+food"
    elif message.text=="–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è":
        k = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        mesto = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        k.add(mesto, back)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=k)
        food="european+food"
    elif message.text=="–¢—É—Ä–µ—Ü–∫–∞—è":
        k = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        mesto = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        k.add(mesto, back)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=k)
        food="turkish+food"
    elif message.text == "–í –≥–æ—Ä–æ–¥–µ":
        k = telebot.types.InlineKeyboardMarkup()
        asian = telebot.types.InlineKeyboardButton(text="–ê–∑–∏–∞—Ç—Å–∫–∞—è", url = "https://www.visitalmaty.kz/ru/cuisines")
        national = telebot.types.InlineKeyboardButton(text="–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", url = "https://www.visitalmaty.kz/ru/cuisines")
        europian = telebot.types.InlineKeyboardButton(text="–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", url = "https://www.visitalmaty.kz/ru/cuisines")
        turkish = telebot.types.InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∞—è", url = "https://www.visitalmaty.kz/ru/cuisines")
        k.add(asian, national, europian, turkish)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é", reply_markup=k)
    elif message.text == "‚õÖ –ü–æ–≥–æ–¥–∞":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        keyboard.add(back)
        city = bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞–º –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥–∫—É?", reply_markup=keyboard)
        bot.register_next_step_handler(city, weath)
    elif message.text == "üõè –ì–¥–µ –ø–µ—Ä–µ–Ω–æ—á–µ–≤–∞—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = telebot.types.KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–µ–µ", request_location=True)
        listed = telebot.types.KeyboardButton(text="–í—Å–µ –º–µ—Å—Ç–∞")
        back = telebot.types.KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")
        keyboard.add(button, listed, back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ", reply_markup=keyboard)
        s = "hotel"
    elif message.text == "–í—Å–µ –º–µ—Å—Ç–∞":
        key = telebot.types.InlineKeyboardMarkup()
        mesta = telebot.types.InlineKeyboardButton(text = "–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å", url = "https://www.visitalmaty.kz/ru/accomodations")
        key.add(mesta)
        bot.send_message(message.chat.id, "–ú–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", reply_markup=key)
    elif message.text == "üï∫ –ì–¥–µ –ø—Ä–æ–≤–µc—Ç–∏ –≤—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã ?":
        s = requests.get('https://sxodim.com/almaty/events/vystavki/?show=today')
        b = bs4.BeautifulSoup(s.text, "html.parser")
        l = b.select('.news_list .location')
        d = b.select('.news_list .date')
        c = b.select('.news_list .cost')
        for i in range(0, len(l)):
            n1 = l[i].getText()
            n2 = d[i].getText()
            n3 = c[i].getText()
            bot.send_message(message.chat.id, ":pushpin:" + n1 + "\n:calendar: " + n2 + "\n:dollar: " + n3)
    elif message.text == "‚óÄ –ù–∞–∑–∞–¥":
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row("üçΩ –ì–¥–µ –ø–æ–µ—Å—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
        user_markup.row("üèî –ì–¥–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
        user_markup.row("üõè –ì–¥–µ –ø–µ—Ä–µ–Ω–æ—á–µ–≤–∞—Ç—å –≤ –ê–ª–º–∞—Ç—ã ?")
        user_markup.row("üìù–ü–ª–∞–Ω–Ω–µ—Ä")
        user_markup.row("‚õÖ –ü–æ–≥–æ–¥–∞")
        user_markup.row("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
        bot.send_message(message.chat.id, '–ú–µ–Ω—é', reply_markup=user_markup)

    elif message.text =="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button1 = telebot.types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å KZT –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É")
        button2 = telebot.types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –≤ KZT")
        keyboard.add(button1)
        keyboard.add(button2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ", reply_markup=keyboard)

    elif message.text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å KZT –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        usd = telebot.types.KeyboardButton(text="USD", )
        gbp = telebot.types.KeyboardButton(text="GBP", )
        chi = telebot.types.KeyboardButton(text="CNY", )
        korea = telebot.types.KeyboardButton(text="KRW", )
        rus = telebot.types.KeyboardButton(text="RUR", )
        eur = telebot.types.KeyboardButton(text="EUR", )
        back = telebot.types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        keyboard.add(usd, gbp, chi, rus, eur, korea, back)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=keyboard)

    elif message.text == "USD":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "USD"
    elif message.text == "GBP":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "GBP"
    elif message.text == "RUR":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "RUR"
    elif message.text == "CNY":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "CNY"
    elif message.text == "KRW":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "KRW"
    elif message.text == "EUR":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "EUR"
    elif isinstance(int(message.text), int):
        if curr=="USD":
            res = int(message.text)*330
            bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
            curr==""
    elif isinstance(int(message.text), int):
        if curr=="USD":
         res = int(message.text)*330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""
    elif isinstance(int(message.text), int):
        if curr=="GBP":
         res = int(message.text)*330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""
    elif isinstance(int(message.text), int):
        if curr=="KRW":
         res = int(message.text)*330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""
    elif isinstance(int(message.text), int):
        if curr=="CNY":
         res = int(message.text)*330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""
    elif isinstance(int(message.text), int):
        if curr=="RUR":
         res = int(message.text)*330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""
    elif isinstance(int(message.text), int):
        if curr=="EUR":
         res = int(message.text)*330
         bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr==""


    elif message.text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –≤ KZT":
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        usd = telebot.types.KeyboardButton(text="USD", )
        gbp = telebot.types.KeyboardButton(text="GBP", )
        chi = telebot.types.KeyboardButton(text="CNY", )
        korea = telebot.types.KeyboardButton(text="KRW", )
        rus = telebot.types.KeyboardButton(text="RUR", )
        eur = telebot.types.KeyboardButton(text="EUR", )
        back = telebot.types.KeyboardButton(text=":–ù–∞–∑–∞–¥")
        keyboard.add(usd, gbp, chi, rus, eur, korea, back)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=keyboard)
    elif message.text == "USD":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "USD"
    elif message.text == "GBP":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "GBP"
    elif message.text == "RUR":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "RUR"
    elif message.text == "CNY":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "CNY"
    elif message.text == "KRW":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "KRW"
    elif message.text == "EUR":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        curr = "EUR"
    elif isinstance(int(message.text), int):
        if curr == "USD":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "USD":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "GBP":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "KRW":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "CNY":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "RUR":
            res = int(message.text) * 330
        bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
    elif isinstance(int(message.text), int):
        if curr == "EUR":
            res = int(message.text) * 330
            bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + str(res))
        curr == ""
def weath(message):
    owm = pyowm.OWM("6e4cdd6906c809a53f60196519cff051")
    city = message.text
    weather = owm.weather_at_place(city)
    w = weather.get_weather()
    temperature = w.get_temperature("celsius")["temp"]
    wind = w.get_wind()["speed"]
    hum = w.get_humidity()
    desc = w.get_detailed_status()
    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ " + str(city) + " " + str(desc) + ", —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - " + str(temperature) + "¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å - " + str(hum) + "%, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - " +str(wind) + "–º/—Å.")



@bot.message_handler(content_types=['location'])
def handle_location(message):
    ulat = str(message.location.latitude)
    ulng = str(message.location.longitude)
    if(s=='food'):
        path = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=" + ulat + "," + ulng + "&radius=500&type=cafe&key=AIzaSyC0AuanxSq5DMmcnojnInlFRzqz0KF5HZI"
        with urllib.request.urlopen(path) as url:
            data = json.loads(url.read().decode())['results']
            for i in range(len(data)):
                lat = data[i]['geometry']['location']['lat']
                lng = data[i]['geometry']['location']['lng']
                name = data[i]['name']
                rating = data[i]['rating']
                address = data[i]['vicinity']
                if ('opening_hours' in data[i]):
                    openow = data[i]['opening_hours']['open_now']
                    opennow = ""
                    if (openow == True):
                        opennow = "Open"
                    elif (openow == False):
                        opennow = "Close"
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(address) + "\n" + "‚≠ê rating: " + str(
                                         rating) + "\n" + "üö™ Open/Close " + str(opennow)+"\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)
                else:
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(
                                         address) + "\n" + "‚≠ê rating: " + str(
                                         rating) + "\n" + "üö™ Open/Close Unknown" + "\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)
    elif(s=="nearbyfood"):
        global food
        path = "https://maps.googleapis.com/maps/api/place/textsearch/json?query=" + food + "&location=" + ulat + "," + ulng + "&radius=300&key=AIzaSyC0AuanxSq5DMmcnojnInlFRzqz0KF5HZI"
        with urllib.request.urlopen(path) as url:
            data = json.loads(url.read().decode())['results']
            for i in range(len(data)):
                lat = data[i]['geometry']['location']['lat']
                lng = data[i]['geometry']['location']['lng']
                name = data[i]['name']
                address = data[i]['formatted_address']
                if ('opening_hours' in data[i] and 'open_now' in data[i]['opening_hours']):
                    openow = data[i]['opening_hours']['open_now']
                    opennow = ""
                    if (openow == True):
                        opennow = "Open"
                    elif (openow == False):
                        opennow = "Close"
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(
                                         address) + "\n" + "üö™ Open/Close " + str(opennow) + "\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)
                else:
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(
                                         address) + "\n" + "üö™ Open/Close Unknown" + "\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)
    elif(s=='hotel'):
        path = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=" + ulat + "," + ulng + "&radius=400&type=lodging&key=AIzaSyC0AuanxSq5DMmcnojnInlFRzqz0KF5HZI"
        ind = 0
        print(path)
        with urllib.request.urlopen(path) as url:
            data = json.loads(url.read().decode())['results']
            for i in range(len(data)):
                lat = data[i]['geometry']['location']['lat']
                lng = data[i]['geometry']['location']['lng']
                name = data[i]['name']
                address = data[i]['vicinity']
                if ('opening_hours' in data[i]):
                    openow = data[i]['opening_hours']['open_now']
                    opennow = ""
                    if (openow == True):
                        opennow = "Open"
                    elif (openow == False):
                        opennow = "Close"
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(
                                         address) + "\n" + "üö™ Open/Close " + str(opennow) + "\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)
                else:
                    bot.send_message(message.chat.id, "____________________________________")
                    bot.send_message(message.chat.id,
                                     "üìå name: " + str(name) + "\n" + "üìç address: " + str(
                                         address) + "\n" + "üö™ Open/Close Unknown" + "\n" + "üìç location: ")
                    bot.send_location(message.chat.id, lat, lng)

bot.polling(none_stop=True, interval=5)
